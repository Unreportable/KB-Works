#include <iostream>


using namespace std;
struct Node       //Структура являющаяся звеном списка
{
	int x;     //Значение x будет передаваться в список
	Node *Next, *Prev; //Указатели на адреса следующего и предыдущего элементов списка
};

class List   //Создаем тип данных Список
{
	Node *Head, *Tail; //Указатели на адреса начала списка и его конца
public:
	List() :Head(NULL), Tail(NULL) {}; //Инициализируем адреса как пустые
	~List(); //Деструктор
	void Show(); //Функция отображения списка на экране
	void Find(int v);
	void Add(int x); //Функция добавления элементов в список
	void Delete(int rt);
	void NPaste(int j, int shto);
	void Show1();
};


List::~List() //Деструктор
{
	while (Head) //Пока по адресу на начало списка что-то есть
	{
		Tail = Head->Next; //Резервная копия адреса следующего звена списка
		delete Head; //Очистка памяти от первого звена
		Head = Tail; //Смена адреса начала на адрес следующего элемента
	}
}

void List::Add(int x)
{
	Node *temp = new Node; //Выделение памяти под новый элемент структуры
	temp->Next = NULL;  //Указываем, что изначально по следующему адресу пусто
	temp->x = x;//Записываем значение в структуру

	if (Head != NULL) //Если список не пуст
	{
		temp->Prev = Tail; //Указываем адрес на предыдущий элемент в соотв. поле
		Tail->Next = temp; //Указываем адрес следующего за хвостом элемента
		Tail = temp; //Меняем адрес хвоста
	}
	else //Если список пустой
	{
		temp->Prev = NULL; //Предыдущий элемент указывает в пустоту
		Head = Tail = temp; //Голова=Хвост=тот элемент, что сейчас добавили
	}
}

void List::Show()
{

	Node *temp = Head;
	//ВЫВОДИМ СПИСОК С НАЧАЛА
	if (Head == NULL) { cout << "EMPTY"; }
	else {            //Временно указываем на адрес первого элемента
		while (temp != NULL)                 //Пока не встретим пустое значение
		{
			if (temp == Head && temp == Tail) { cout << temp->x << " "; break; }
			else {
				cout << temp->x << " "; //Выводим каждое считанное значение на экран
				temp = temp->Next; //Смена адреса на адрес следующего элемента
			}
		}
	}
	cout << "\n";
}
void List::Show1()
{

	Node *temp = Tail;
	//ВЫВОДИМ СПИСОК С konca
	if (Tail == NULL) { cout << "EMPTY"; }
	else {            //Временно указываем на адрес первого элемента
		while (temp != NULL)                 //Пока не встретим пустое значение
		{
			if (temp == Head && temp == Tail) { cout << temp->x << " "; break; }
			else {

				cout << temp->x << " "; //Выводим каждое считанное значение на экран
				temp = temp->Prev; //Смена адреса на адрес следующего элемента
			}
		}
	}
	cout << "\n";
}

void List::Find(int v)
{

	Node *temp = Head;


	while (temp != NULL)
	{
		if (temp->x == v) { cout << "BUSTED"; break; }
		else {
			cout << temp->x << " ";
			temp = temp->Next;
		}
	}
	cout << "\n";
}


void List::Delete(int rt)
{
	Node *VTail;
	Node *DPrev;
	Node *temp = Head;
	Node *DNext;
	int k = 0;
	int N = 1; //жобавь для 1 элемента
	if (rt == 1) {
		Head = temp->Next;

		delete temp;
		temp = Head;
		temp->Prev = NULL;


	}
	if (rt > 1) {
		for (int i = 0; i < rt-1; i++) {
			temp = temp->Next;
	}
		if (temp->Next == Tail) {
			delete Tail;
			temp->Next = NULL;
			Head = Tail = temp;

		}
		if(temp->Next!=NULL) {
			DPrev = temp->Prev;
			DNext = temp->Next;
			delete temp;
			temp = DPrev;
			temp->Next = DNext;
			temp = temp->Next;
			temp->Prev = DPrev;
	}
		if (temp->Next == NULL) {
			VTail = Tail->Prev;
			delete Tail;
			Tail = VTail;
			Tail->Next = NULL;




		}








	}
}

void List::NPaste(int j, int shto)
{
	int N = 1;
	Node *star = Head;
	Node *temp = new Node;
	temp->x = shto;
	if (Head == NULL && Tail == NULL) {
		temp->Next = NULL;
		Head = Tail = temp;
	}
	else {
		if (j == 1) {
			star->Prev = temp;
			temp->Next = star;
			Head = temp;
			temp->Prev = NULL;


		}

		if (j == 2) {
			if (star->Next != Tail) {
				temp->Prev = star;
				temp->Next = star->Next;
				star->Next = temp;
				star = star->Next;
				star = temp;
				star = star->Next;
				star->Prev = temp;
			}
			else {

				temp->Prev = Head;
				temp->Next = Tail;
				Tail->Prev = temp;
				Head->Next = temp;
					Head->Prev = NULL;
					Tail->Next = NULL;

			}
		}







			if (j > 2){
				for (int i = 0; i < j - 2; i++)
					star = star->Next;
			if (star->Next != 0) {
				temp->Next = star->Next;
				temp->Prev = star;
				star->Next = temp;
				star = star->Next;
				star = temp;
				star = star->Next;
				star->Prev = temp;
			}
			else {
				temp->Next = NULL;
				temp->Prev = Tail;
				Tail->Next = temp;
				Tail = temp;
			}
			}
		


	}
}


int main(void) {
	List lst;
	lst.Add(7);
	lst.Add(5);
	lst.Add(6);
	lst.Add(7);
	lst.Add(3);
	lst.Show();
//	lst.Find(7);
	lst.Delete(5);
	//lst.Show();

	lst.NPaste(2, 111);
	

	cout << '\n';
	lst.Show();
	lst.Show1();
	cout << '\n';
	system("pause");

}
