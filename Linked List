#include <iostream>


using namespace std;
struct Node
{
	int x;
	Node *Next;
};

class List
{
	Node *Head, *Tail;
public:
	List() :Head(NULL), Tail(NULL) {};
	~List(); //Деструктор
	void Show(); //Функция отображения списка на экране
	void Find(int v);

	void Delete(int rt);
	void NPaste(int j, int shto);

};


List::~List() //Деструктор
{
	while (Head) //Пока по адресу на начало списка что-то есть
	{
		Tail = Head->Next; //Резервная копия адреса следующего звена списка
		delete Head; //Очистка памяти от первого звена
		Head = Tail; //Смена адреса начала на адрес следующего элемента
	}
}

void List::Show()
{

	Node *temp = Head;
	//ВЫВОДИМ СПИСОК С НАЧАЛА
	if (Head == NULL) { cout << "EMPTY"; }
	else {            //Временно указываем на адрес первого элемента
		while (temp != NULL)                 //Пока не встретим пустое значение
		{
			
			if (temp == Head && temp == Tail) { cout << temp->x << " "; break; }
			else {
				cout << temp->x << " "; //Выводим каждое считанное значение на экран
				temp = temp->Next; //Смена адреса на адрес следующего элемента
				
			}  
		}
	}
	cout << "\n";
}


void List::Find(int v)
{

	Node *temp = Head;


	while (temp != NULL)
	{
		if (temp->x == v) { cout << "BUSTED"; break; }
		else {
			cout << temp->x << " ";
			temp = temp->Next;
		}
	}
	cout << "\n";
}


void List::Delete(int rt)
{

	
	Node *temp = Head;
	Node *DNext;
	Node *Dzam = NULL;
	int k = 0;
	int N = 1; //жобавь для 1 элемента
	if (rt == 1) {
		if (Head != NULL && Head->Next != NULL) {
			Head = temp->Next;

			delete temp;
			temp = Head;
		}
		if (Head != NULL && Head->Next == NULL) { delete temp;
		Head = Tail = NULL;
		}

	}
	if (rt > 1) {
		for (int i = 0; i < rt - 1; i++) {
		if (i == rt - 2) { Dzam = temp; }
			temp = temp->Next;
			


		}
		if (temp->Next == Tail) {
			delete Tail;
			temp->Next = NULL;
			Head = Tail = temp;

		}
		if (temp->Next != NULL && temp->Next!=Tail) {
			DNext = temp->Next;
			delete temp;
			temp = Dzam;
			temp->Next = DNext;

		}
		if (temp->Next == NULL) {

			delete Tail;
			Tail->Next = NULL;
			temp = Dzam;
			temp->Next = NULL;
		}
	}
}

void List::NPaste(int j, int shto)
{
	int N = 1;
	Node *FutData = NULL;
	Node *JData = NULL;
	Node *star = Head;
	Node *temp = new Node;
	temp->x = shto;
	if (Head == NULL && Tail == NULL) {
		temp->Next = NULL;
		Head = Tail = temp;
	}
	else {
		if (j == 1) {

			temp->Next = star;
			Head = temp;
			Head->Next = star;



		}

		if (j == 2) {
			if (star->Next != NULL) { //стандартная вставка во второй элемент, когда есть и слева и справа
JData = star; //первый элемент
star=star->Next;//переходим во второй
FutData = star; // запомнили  original второго
star = JData;
star->Next = temp;
star = star->Next;
star->Next = FutData;

			}
			else { //для вставки во второй, но у тебя всего 1!
				Tail=Head = star;
				Head->Next = temp;
				star->Next = temp;
				star = star->Next;
				Tail = star;
				Tail->Next = NULL;
				star->Next = NULL;

			}
		}


		if (j > 2) {
			for (int i = 0; i < j - 2; i++)
				star = star->Next;
			if (star->Next != 0) {
				temp->Next = star->Next;

				star->Next = temp;
				star = star->Next;
				star = temp;
				star = star->Next;

			}
			else {
				temp->Next = NULL;

				Tail->Next = temp;
				Tail = temp;
			}
		}



	}
}


int main(void) {
	List lst;
	lst.NPaste(1, 11);
	lst.NPaste(2, 22);
	
	lst.NPaste(3, 33);
lst.NPaste(4, 44);
	lst.NPaste(2, 313);
	lst.Show();
	lst.Find(7);
	lst.Delete(5);
	lst.Show();

lst.NPaste(2, 111);


	cout << '\n';
	lst.Show();

	cout << '\n';
	system("pause");

}
